/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package it.polimi.genomics.avro.test;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

/** A GArray entity. */
@org.apache.avro.specific.AvroGenerated
public class GArray extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -3712469189814296948L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"GArray\",\"namespace\":\"it.polimi.genomics.avro.test\",\"doc\":\"A GArray entity.\",\"fields\":[{\"name\":\"gRecord\",\"type\":{\"type\":\"record\",\"name\":\"gCoords\",\"fields\":[{\"name\":\"chr\",\"type\":\"string\"},{\"name\":\"start\",\"type\":\"long\"},{\"name\":\"stop\",\"type\":\"long\"},{\"name\":\"strand\",\"type\":\"string\"}]}},{\"name\":\"idsList\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"idsList\",\"fields\":[{\"name\":\"id\",\"type\":\"long\"},{\"name\":\"rep\",\"type\":\"int\"}]}}},{\"name\":\"valuesArray\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"sampleRec\",\"fields\":[{\"name\":\"sampleArray\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"repRec\",\"fields\":[{\"name\":\"repArray\",\"type\":{\"type\":\"array\",\"items\":[\"null\",\"string\",{\"type\":\"map\",\"values\":\"int\"}]}}]}}}]}}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<GArray> ENCODER =
      new BinaryMessageEncoder<GArray>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<GArray> DECODER =
      new BinaryMessageDecoder<GArray>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<GArray> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<GArray> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<GArray> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<GArray>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this GArray to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a GArray from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a GArray instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static GArray fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

   private it.polimi.genomics.avro.test.gCoords gRecord;
   private java.util.List<it.polimi.genomics.avro.test.idsList> idsList;
   private java.util.List<it.polimi.genomics.avro.test.sampleRec> valuesArray;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public GArray() {}

  /**
   * All-args constructor.
   * @param gRecord The new value for gRecord
   * @param idsList The new value for idsList
   * @param valuesArray The new value for valuesArray
   */
  public GArray(it.polimi.genomics.avro.test.gCoords gRecord, java.util.List<it.polimi.genomics.avro.test.idsList> idsList, java.util.List<it.polimi.genomics.avro.test.sampleRec> valuesArray) {
    this.gRecord = gRecord;
    this.idsList = idsList;
    this.valuesArray = valuesArray;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return gRecord;
    case 1: return idsList;
    case 2: return valuesArray;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: gRecord = (it.polimi.genomics.avro.test.gCoords)value$; break;
    case 1: idsList = (java.util.List<it.polimi.genomics.avro.test.idsList>)value$; break;
    case 2: valuesArray = (java.util.List<it.polimi.genomics.avro.test.sampleRec>)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'gRecord' field.
   * @return The value of the 'gRecord' field.
   */
  public it.polimi.genomics.avro.test.gCoords getGRecord() {
    return gRecord;
  }


  /**
   * Sets the value of the 'gRecord' field.
   * @param value the value to set.
   */
  public void setGRecord(it.polimi.genomics.avro.test.gCoords value) {
    this.gRecord = value;
  }

  /**
   * Gets the value of the 'idsList' field.
   * @return The value of the 'idsList' field.
   */
  public java.util.List<it.polimi.genomics.avro.test.idsList> getIdsList() {
    return idsList;
  }


  /**
   * Sets the value of the 'idsList' field.
   * @param value the value to set.
   */
  public void setIdsList(java.util.List<it.polimi.genomics.avro.test.idsList> value) {
    this.idsList = value;
  }

  /**
   * Gets the value of the 'valuesArray' field.
   * @return The value of the 'valuesArray' field.
   */
  public java.util.List<it.polimi.genomics.avro.test.sampleRec> getValuesArray() {
    return valuesArray;
  }


  /**
   * Sets the value of the 'valuesArray' field.
   * @param value the value to set.
   */
  public void setValuesArray(java.util.List<it.polimi.genomics.avro.test.sampleRec> value) {
    this.valuesArray = value;
  }

  /**
   * Creates a new GArray RecordBuilder.
   * @return A new GArray RecordBuilder
   */
  public static it.polimi.genomics.avro.test.GArray.Builder newBuilder() {
    return new it.polimi.genomics.avro.test.GArray.Builder();
  }

  /**
   * Creates a new GArray RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new GArray RecordBuilder
   */
  public static it.polimi.genomics.avro.test.GArray.Builder newBuilder(it.polimi.genomics.avro.test.GArray.Builder other) {
    if (other == null) {
      return new it.polimi.genomics.avro.test.GArray.Builder();
    } else {
      return new it.polimi.genomics.avro.test.GArray.Builder(other);
    }
  }

  /**
   * Creates a new GArray RecordBuilder by copying an existing GArray instance.
   * @param other The existing instance to copy.
   * @return A new GArray RecordBuilder
   */
  public static it.polimi.genomics.avro.test.GArray.Builder newBuilder(it.polimi.genomics.avro.test.GArray other) {
    if (other == null) {
      return new it.polimi.genomics.avro.test.GArray.Builder();
    } else {
      return new it.polimi.genomics.avro.test.GArray.Builder(other);
    }
  }

  /**
   * RecordBuilder for GArray instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<GArray>
    implements org.apache.avro.data.RecordBuilder<GArray> {

    private it.polimi.genomics.avro.test.gCoords gRecord;
    private it.polimi.genomics.avro.test.gCoords.Builder gRecordBuilder;
    private java.util.List<it.polimi.genomics.avro.test.idsList> idsList;
    private java.util.List<it.polimi.genomics.avro.test.sampleRec> valuesArray;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(it.polimi.genomics.avro.test.GArray.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.gRecord)) {
        this.gRecord = data().deepCopy(fields()[0].schema(), other.gRecord);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (other.hasGRecordBuilder()) {
        this.gRecordBuilder = it.polimi.genomics.avro.test.gCoords.newBuilder(other.getGRecordBuilder());
      }
      if (isValidValue(fields()[1], other.idsList)) {
        this.idsList = data().deepCopy(fields()[1].schema(), other.idsList);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.valuesArray)) {
        this.valuesArray = data().deepCopy(fields()[2].schema(), other.valuesArray);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
    }

    /**
     * Creates a Builder by copying an existing GArray instance
     * @param other The existing instance to copy.
     */
    private Builder(it.polimi.genomics.avro.test.GArray other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.gRecord)) {
        this.gRecord = data().deepCopy(fields()[0].schema(), other.gRecord);
        fieldSetFlags()[0] = true;
      }
      this.gRecordBuilder = null;
      if (isValidValue(fields()[1], other.idsList)) {
        this.idsList = data().deepCopy(fields()[1].schema(), other.idsList);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.valuesArray)) {
        this.valuesArray = data().deepCopy(fields()[2].schema(), other.valuesArray);
        fieldSetFlags()[2] = true;
      }
    }

    /**
      * Gets the value of the 'gRecord' field.
      * @return The value.
      */
    public it.polimi.genomics.avro.test.gCoords getGRecord() {
      return gRecord;
    }


    /**
      * Sets the value of the 'gRecord' field.
      * @param value The value of 'gRecord'.
      * @return This builder.
      */
    public it.polimi.genomics.avro.test.GArray.Builder setGRecord(it.polimi.genomics.avro.test.gCoords value) {
      validate(fields()[0], value);
      this.gRecordBuilder = null;
      this.gRecord = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'gRecord' field has been set.
      * @return True if the 'gRecord' field has been set, false otherwise.
      */
    public boolean hasGRecord() {
      return fieldSetFlags()[0];
    }

    /**
     * Gets the Builder instance for the 'gRecord' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public it.polimi.genomics.avro.test.gCoords.Builder getGRecordBuilder() {
      if (gRecordBuilder == null) {
        if (hasGRecord()) {
          setGRecordBuilder(it.polimi.genomics.avro.test.gCoords.newBuilder(gRecord));
        } else {
          setGRecordBuilder(it.polimi.genomics.avro.test.gCoords.newBuilder());
        }
      }
      return gRecordBuilder;
    }

    /**
     * Sets the Builder instance for the 'gRecord' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public it.polimi.genomics.avro.test.GArray.Builder setGRecordBuilder(it.polimi.genomics.avro.test.gCoords.Builder value) {
      clearGRecord();
      gRecordBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'gRecord' field has an active Builder instance
     * @return True if the 'gRecord' field has an active Builder instance
     */
    public boolean hasGRecordBuilder() {
      return gRecordBuilder != null;
    }

    /**
      * Clears the value of the 'gRecord' field.
      * @return This builder.
      */
    public it.polimi.genomics.avro.test.GArray.Builder clearGRecord() {
      gRecord = null;
      gRecordBuilder = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'idsList' field.
      * @return The value.
      */
    public java.util.List<it.polimi.genomics.avro.test.idsList> getIdsList() {
      return idsList;
    }


    /**
      * Sets the value of the 'idsList' field.
      * @param value The value of 'idsList'.
      * @return This builder.
      */
    public it.polimi.genomics.avro.test.GArray.Builder setIdsList(java.util.List<it.polimi.genomics.avro.test.idsList> value) {
      validate(fields()[1], value);
      this.idsList = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'idsList' field has been set.
      * @return True if the 'idsList' field has been set, false otherwise.
      */
    public boolean hasIdsList() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'idsList' field.
      * @return This builder.
      */
    public it.polimi.genomics.avro.test.GArray.Builder clearIdsList() {
      idsList = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'valuesArray' field.
      * @return The value.
      */
    public java.util.List<it.polimi.genomics.avro.test.sampleRec> getValuesArray() {
      return valuesArray;
    }


    /**
      * Sets the value of the 'valuesArray' field.
      * @param value The value of 'valuesArray'.
      * @return This builder.
      */
    public it.polimi.genomics.avro.test.GArray.Builder setValuesArray(java.util.List<it.polimi.genomics.avro.test.sampleRec> value) {
      validate(fields()[2], value);
      this.valuesArray = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'valuesArray' field has been set.
      * @return True if the 'valuesArray' field has been set, false otherwise.
      */
    public boolean hasValuesArray() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'valuesArray' field.
      * @return This builder.
      */
    public it.polimi.genomics.avro.test.GArray.Builder clearValuesArray() {
      valuesArray = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public GArray build() {
      try {
        GArray record = new GArray();
        if (gRecordBuilder != null) {
          try {
            record.gRecord = this.gRecordBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("gRecord"));
            throw e;
          }
        } else {
          record.gRecord = fieldSetFlags()[0] ? this.gRecord : (it.polimi.genomics.avro.test.gCoords) defaultValue(fields()[0]);
        }
        record.idsList = fieldSetFlags()[1] ? this.idsList : (java.util.List<it.polimi.genomics.avro.test.idsList>) defaultValue(fields()[1]);
        record.valuesArray = fieldSetFlags()[2] ? this.valuesArray : (java.util.List<it.polimi.genomics.avro.test.sampleRec>) defaultValue(fields()[2]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<GArray>
    WRITER$ = (org.apache.avro.io.DatumWriter<GArray>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<GArray>
    READER$ = (org.apache.avro.io.DatumReader<GArray>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}










